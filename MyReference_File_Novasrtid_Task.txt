				Task 3: Infrastructure Provisioning and Monitoring with Terraform & Prometheus

Task Description:

You are tasked with provisioning a simple cloud infrastructure and setting up basic monitoring for an application using Terraform and Prometheus.

Requirements:

1. Provision Infrastructure using Terraform:

   - Create a simple infrastructure setup in AWS, GCP, or Azure (e.g., a Virtual Machine, Load Balancer, and a Storage bucket).

   - Ensure the infrastructure is set up via Terraform configuration files (e.g., `main.tf`).

   - Add input variables for customization (e.g., instance type, region, etc.).

   - Use a Terraform backend for state management (e.g., AWS S3, Azure Blob Storage).

  

2. Set up Prometheus for Monitoring:

   - Install Prometheus and expose basic metrics for your provisioned infrastructure.

   - Create a basic `prometheus.yml` configuration to scrape the infrastructure metrics (e.g., CPU usage, memory, disk space).

   - Integrate Prometheus with Grafana to visualize the metrics.



Task-3 Answer : creating a virual machine
 
1. 

--> provider.tf 

provider "aws" {
	region = "us-east-1"
}

backend "s3" {
	bucket_id = "1978ABC"
	key = "789456" 
}


--> main.tf

resource "aws_ec2" "web" {
	  ami_id = "123456789"
	  instance_type = var.instance_type
	  Environment = var.Environment
	  project = var.Project 

	  tags = {
		Name = "My-instance"

		}
}

--> variables.tf 

		variables {

default = 	instance_type = "t2.micro"
		Environment = "DEV"
		Project = "E-commerce"
}
}

2. 

--> Install the prometheus sever in server

--> In the prometheus server we have a prometheus.yaml file and we need to edit that file to scrape our metrics

	static_scraping : 
		job_name: "ec2_scrapping"
		target: "[ipaddress:port]"

From the above scrap our target server will start monitor

--> Installing grafana for better visualization 



					TASK -2 

Task 2 : Containerize a Web Application using Docker

Task Description:

You are required to containerize a simple web application (e.g., a Node.js, Python, or static HTML/CSS/JavaScript application) by creating a `Dockerfile` that builds and runs the application inside a Docker container.

Requirements:

1. Create or Use a Simple Web Application:

   - If you don't have an application, you can use any basic app. For example, a small Node.js or Python Flask application, or even a static HTML/CSS/JS site.

   - The application should be a simple web server that can be accessed via HTTP (e.g., on port 80 or 8080).

   

2. Create a Dockerfile:

   - Write a `Dockerfile` that:

     - Sets up the environment:

      - Use an appropriate base image for your application (e.g., node:16, python:3.9, or nginx:latest).

    - Installs dependencies:

      - For Node.js, this would involve copying `package.json` and running `npm install`.

      - For Python, it may involve copying `requirements.txt` and running `pip install -r requirements.txt`.

     - Builds the application:

       - Run necessary build steps (e.g., `npm run build` for a React app or a Node.js server).

     - Exposes necessary ports:

       - Expose the port on which the application will run (e.g., `EXPOSE 8080`).

     - Runs the application:

       - Use the `CMD` or `ENTRYPOINT` directive to start the application (e.g., `npm start` for a Node.js app, `python app.py` for a Flask app).

3. Docker Build and Run:

   - Build the Docker image using the `docker build` command.

   - Run the Docker container using the `docker run` command and ensure the application is accessible via a browser or `curl` from the host machine.

   

4. Test the Dockerized Application:

   - After successfully building and running the container, you should be able to access the application by visiting `http://localhost:8080` or the equivalent port specified in your Dockerfile.

   
Task -2 Answer : 

--> writing a docker file for the above task 

This is for nginx configuration 


FROM nginx:latest 

RUN yum install nginx -y 

RUN rm -rf /usr/share/nginx/index.html

COPY /myapp  /usr/share/nginx/

EXPOSE 8080

CMD ['nginx','-g','daemon:off']

Build and run commands 

docker build -t myapp:v1 .

docker run -d -p 8080:80 --name myapp <imageid>

This is for nodejs configuration 

FROM node:16 

WORKDIR /myapp

RUN yum npm install -y
  
COPY package.json .

COPY server.js .

EXPOSE 8080

CMD ['node','start']

Build and run commands

docker build -t myapp:v1 .

docker run -d -p 8080:8080 --name myapp <imageid>



  							TASK-1

Task 1 : Basic Shell Scripting for System Automation

Task Description:

You are tasked with writing a shell script that automates the backup of important application files and logs, manages old backups, and ensures the environment is set up correctly for the application to run.

Requirements:

1. Backup Application Files and Logs:

     - Write a shell script that:

     - Backs up a specified directory (e.g., `/var/www/app` or `/home/user/app`) to a backup location (e.g., `/backup/`).

     - Include a timestamp in the backup file's name (e.g., `app-backup-YYYY-MM-DD.tar.gz`).

     - Compress the backup to save space.

   

2. Clean Old Backups:

   - The script should automatically delete backups older than 7 days to free up space in the backup directory.

   - Ensure that backups are only removed if they are older than the set threshold (e.g., 7 days).

   

3. Check for System Requirements:

   - The script should check if certain system dependencies are installed before running the backup (e.g., `tar`, `gzip`, `cron`).

   - If dependencies are missing, the script should print a warning and exit gracefully.

   

4. Scheduling the Script with Cron:

   - Add instructions to set up a cron job that runs the script daily at midnight.



Task-1 Answer: 

backupscript.sh
1. 

#!/bin/bash

SOURCE_DIR = "home/source"
BACKUP_DIR = "/var/www/app"
TIMESTAMP = $(date "+%YY-%MM-%DD")
BACKUP_FILE = "/mybackup/-$SOURCE_DIR-$BACKUP_DIR-$TIMESTAMP.tar.gz"

echo "backup completed successfully: tar -czf $BACKUP_FILE"

2. 

find /var/myapp -type f *.tar.gz -mtime +7 -exec rm -i {} \ 

3. 

if [ userid == 0 ]
 then 
	echo "install: yum install tar gz cron -y"
 else
	echo "you are not a valide user to install the package: ERROR"
fi 

4. 

Install first crontab software 
crontab -e open this file and keep cron syntax as (* * * * *) /my/script/backupscript.sh

Minutes
Hours
DayOfMonth 
Month
DayOfWeek

(0 /*2 0 0 0 )  --> This script will run every day at 2.00am midnight 










